name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "*" ]
    types: ['opened', 'reopened', 'synchronize', 'ready_for_review']

permissions:
  contents: read
  packages: write

jobs:
  symfony-tests:
    if: '! github.event.pull_request.draft'
    runs-on: ubuntu-latest

    steps:
      - name: Set up PHP 8.4
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4-fpm'

      - name: Install Symfony CLI
        run: |
          curl -sS https://get.symfony.com/cli/installer | bash
          mv /home/runner/.symfony*/bin/symfony /usr/local/bin/symfony

      - uses: actions/checkout@v3

      - name: Set up MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3800
          mysql version: '8.0'
          mysql database: 'mixlink_test'
          mysql root password: 'password'
          mysql password: 'password'

      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin ping --host=127.0.0.1 --port=3800 --password=password --silent; do
            sleep 1
          done

      - name: Install PHP Deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libzip-dev

      - name: Copy .env.test.local
        run: |
          cd back
          php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"

      - name: Make build dir
        run: |
          cd back
          mkdir public/bundles

      - name: Install Dependencies
        run: |
          cd back
          composer install --no-ansi --no-interaction --no-progress
          bin/console c:c --env=test

      - name: Run database migrations
        env:
          DATABASE_URL: mysql://root:password@127.0.0.1:3800/mixlink_test?serverVersion=14&charset=utf8
        run: |
          cd back
          php bin/console doctrine:migration:migrate --env=test --no-interaction

      - name: Run GrumPHP
        run: |
          cd back
          XDEBUG_MODE=off vendor/bin/grumphp run

      - name: Run PHPUnit unit tests
        run: |
          cd back
          XDEBUG_MODE=off vendor/bin/phpunit tests/unit

      - name: Run PHPUnit functional tests
        run: |
          cd back
          sed -i 's/database/127.0.0.1/g' phpunit.xml.dist
          sed -i 's/3306/3800/g' phpunit.xml.dist
          bin/console c:c --env=test
          XDEBUG_MODE=off vendor/bin/phpunit tests/functional
  build-backend:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: symfony-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository
        id: lowercase_repo
        run: |
          echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "TAGS=ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/backend:latest,ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/backend:${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "TAGS=ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/backend:latest-develop,ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/backend:develop-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile.prod
          push: true
          tags: ${{ steps.tags.outputs.TAGS }}

  frontend-tests:
    if: '! github.event.pull_request.draft'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install Dependencies
        run: |
          cd front
          npm ci

      - name: Lint
        run: |
          cd front
          npm run lint

      - name: Format Check
        run: |
          cd front
          npx prettier --check src/

      - name: Run Unit Tests
        run: |
          cd front
          npm run test:unit

      - name: Build
        run: |
          cd front
          npm run build

      #Check later
      # - name: Run End-to-End Tests
      #   run: |
      #     cd front
      #     npm run test:e2e

  build-frontend:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: frontend-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository
        id: lowercase_repo
        run: |
          echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "TAGS=ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/frontend:latest,ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "TAGS=ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/frontend:latest-develop,ghcr.io/${{ steps.lowercase_repo.outputs.REPO_LOWER }}/frontend:develop-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile.prod
          push: true
          tags: ${{ steps.tags.outputs.TAGS }}

  deploy-preprod:
    if: github.ref == 'refs/heads/develop'
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Preprod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/baptiste/mixlink-preprod
            docker compose pull
            docker compose up -d
            docker image prune -f

  deploy-prod:
    if: github.ref == 'refs/heads/master'
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Prod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/baptiste/mixlink
            docker compose pull
            docker compose up -d
            docker image prune -f
